import { VTKLayout, imageCache } from 'vtk-viewport';
import { paintTool } from 'someToolPlace'; // I'd kinda rather these aren't in this library. vtkjs-tools?

const ctVolume = imageCache.makeAndCacheVolume(ctImageIds);
const ptVolume = imageCache.makeAndCacheVolume(ptImageIds);

const ctUID = ctVolume.UID;
const ptUID = ptVolume.UID;

const ptScalarData = ptVolume.scalarData;
const ptArrayLength = ptScalarData.length;

const tmtvScalarData = new UInt8Array(ptArrayLength);

// volumeData is optional, but we want to set it as UInt8Array. If you don't give it you get a Float32Array by default.
const tmtvVolume = imageCache.makeAndCacheDerivedVolume(ptUID, {
  volumeScalarData: tmtvScalarData,
});

const { UID: tmtvUID, scalarData: tmtvScalarData } = tmtvVolume;

// Threshold on SUV > 3
for (let i = 0; i < ptArrayLength; i++) {
  tmtvScalarData[i] = ptScalarData[i] > 3 ? 1 : 0;
}

// Pre fetch volumes (we could delay this until data is added to the layout in a more complex example)

const containerElement = document.getElementById('myCanvas');
const layout = new VTKLayout(containerElement, 'monitor1');

function setCTWWWC(volumeActor) {
  // Something
}

function setPetTransferFunction(volumeActor) {
  // Something
}

function setTMTVTransfewFunction(volumeActor) {
  // Something
}

const axialViewportID = 'axial';
const simpleSceneID = 'simpleScene';

// This will generate all the renderers and initialise them (cameras and such).
// It will not render anything though, untill we call layout.render();
layout.setLayout([
  {
    sceneUID: simpleSceneID,
    viewportUID: axialViewportID,
    type: 'orthogonal',
    position: [0, 0.5, 0, 1],
  },
]);

const simpleScene = layout.getScene(simpleSceneID);

simpleScene.setVolumes([
  { volumeUID: ctUID, callback: setCTWWWC },
  { volumeUID: ptUID, callback: setPetTransferFunction },
  { volumeUID: tmtvUID, callback: setTMTVTransfewFunction },
]);

function throttledRenderScene() {
  simpleScene.render(); // Throttled render on image load
}

imageCache.loadVolume(ctUID, throttledRenderScene);
imageCache.loadVolume(ptUID, throttledRenderScene);

toolManager.addTool(paintTool, 'paint');

// Define tool groups - These could be dynamically generated by the app, or hardcoded somewhere.

const paintToolGroup = {
  UID: 'paint',
  tools: [
    {
      toolName: 'paint',
      button: toolManager.buttons.LEFT,
      options: {
        backgroundVolumeUID: ptUID,
        labelmapVolumeUID: tmtvUID,
      },
    },
  ],
};

layout.addToolGroup(paintToolGroup);

// Set the tool group for our viewport
const axialViewport = fourUpScene.getViewport(axialViewportID);
axialViewport.setToolGroup('paint');
